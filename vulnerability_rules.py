# vulnerability_rules.py
import re

class PHPVulnerabilityRules:
    def __init__(self):
        self.rules = self._initialize_rules()

    def _initialize_rules(self):
        return [
            # --- Injection / Command execution / RCE
            {
                'type': 'command_injection',
                'severity': 'critical',
                'pattern': re.compile(r'\b(?:system|exec|shell_exec|passthru|popen|proc_open)\s*\(', re.IGNORECASE),
                'message': 'Potential command injection - system/exec family used',
                'description': 'Executing system commands with user-controlled input may lead to RCE.',
                'remediation': 'Avoid executing shell commands; use safe APIs and validate inputs.',
                'cwe_id': 'CWE-77',
                'owasp_category': 'A03:2021 – Injection'
            },

            {
                'type': 'code_injection',
                'severity': 'critical',
                'pattern': re.compile(r'\beval\s*\(', re.IGNORECASE),
                'message': 'Use of eval detected',
                'description': 'eval executes arbitrary PHP code and can lead to code injection.',
                'remediation': 'Remove eval(); use structured parsing or safer alternatives.',
                'cwe_id': 'CWE-94',
                'owasp_category': 'A03:2021 – Injection'
            },

            {
                'type': 'code_injection',
                'severity': 'critical',
                'pattern': re.compile(r'\bassert\s*\(', re.IGNORECASE),
                'message': 'Use of assert() detected (may evaluate user input)',
                'description': 'assert() can act like eval() if it receives user input.',
                'remediation': 'Avoid assert() with dynamic input; validate and sanitize inputs.',
                'cwe_id': 'CWE-94',
                'owasp_category': 'A03:2021 – Injection'
            },

            # --- Cross-Site Scripting (XSS)
            {
                'pattern': re.compile(r'echo\s+.*\$_(GET|POST|REQUEST)\[.*\]', re.IGNORECASE),
                'type': 'xss',
                'severity': 'high',
                'message': 'Possible Cross-Site Scripting (XSS) vulnerability',
                'description': 'Unescaped user input is directly output to the page.',
                'remediation': 'Escape output using htmlspecialchars() or a templating engine.',
                'cwe_id': 'CWE-79',
                'owasp_category': 'A03:2021 – Injection'
            },

            {
    'pattern': re.compile(
        r'\b(mysqli_query|mysql_query|pg_query)\s*\([^)]*(\$_(GET|POST|REQUEST)|\$[a-zA-Z_][a-zA-Z0-9_]*)[^)]*\)',
        re.IGNORECASE
    ),
    'type': 'sql_injection',
    'severity': 'critical',
    'message': 'Possible SQL Injection vulnerability',
    'description': 'Direct or indirect use of user input inside SQL queries.',
    'remediation': 'Use parameterized queries (prepared statements).',
    'cwe_id': 'CWE-89',
    'owasp_category': 'A03:2021 – Injection'
},


            # --- File include / LFI / RFI
            {
                'type': 'file_inclusion',
                'severity': 'critical',
                'pattern': re.compile(r'\b(?:include|require|include_once|require_once)\s*\(\s*[^)]*\$_(?:GET|POST|REQUEST|COOKIE)', re.IGNORECASE),
                'message': 'File inclusion from user input detected',
                'description': 'Including files based on user input can lead to LFI/RFI.',
                'remediation': 'Whitelist allowed files, use full paths, and validate input carefully.',
                'cwe_id': 'CWE-98',
                'owasp_category': 'A03:2021 – Injection'
            },

            # --- File upload misuse
            {
                'type': 'insecure_upload',
                'severity': 'high',
                'pattern': re.compile(r'\bmove_uploaded_file\s*\(', re.IGNORECASE),
                'message': 'Uploaded file handling detected',
                'description': 'File uploads need validation of type/size; unvalidated uploads may allow execution.',
                'remediation': 'Validate MIME type, extension, and store outside webroot. Rename uploads.',
                'cwe_id': 'CWE-434',
                'owasp_category': 'A03:2021 – Injection'
            },

            # --- Unsafe deserialization
            {
                'type': 'deserialization',
                'severity': 'high',
                'pattern': re.compile(r'\bunserialize\s*\(\s*\$_(?:GET|POST|REQUEST|COOKIE)', re.IGNORECASE),
                'message': 'Unsafe deserialization of user data',
                'description': 'Deserializing untrusted input can lead to remote code execution or object injection.',
                'remediation': 'Avoid unserialize on untrusted data; use JSON or validate content before deserializing.',
                'cwe_id': 'CWE-502',
                'owasp_category': 'A08:2021 – Software and Data Integrity Failures'
            },

            # --- Weak cryptography / RNG
            {
                'type': 'weak_crypto',
                'severity': 'medium',
                'pattern': re.compile(r'\b(?:md5|sha1|crypt)\s*\(', re.IGNORECASE),
                'message': 'Use of weak cryptographic functions',
                'description': 'MD5, SHA1, and crypt are not suitable for password hashing or secure hashing.',
                'remediation': 'Use password_hash(), password_verify(), bcrypt, Argon2, or libs like libsodium.',
                'cwe_id': 'CWE-327',
                'owasp_category': 'A02:2021 – Cryptographic Failures'
            },
            {
                'type': 'weak_random',
                'severity': 'medium',
                'pattern': re.compile(r'\b(?:rand|mt_rand|srand|mt_srand)\s*\(', re.IGNORECASE),
                'message': 'Weak random number generator usage',
                'description': 'rand()/mt_rand are not cryptographically secure.',
                'remediation': 'Use random_int() or random_bytes() for cryptographic randomness.',
                'cwe_id': 'CWE-338',
                'owasp_category': 'A02:2021 – Cryptographic Failures'
            },

            # --- Sensitive data disclosures & debug
            {
                'type': 'info_disclosure',
                'severity': 'medium',
                'pattern': re.compile(r'\b(?:phpinfo|var_dump|print_r|error_log)\s*\(', re.IGNORECASE),
                'message': 'Potential information disclosure (debug functions used)',
                'description': 'Debug functions can leak sensitive data in production.',
                'remediation': 'Remove debug outputs and use secure logging for production.',
                'cwe_id': 'CWE-200',
                'owasp_category': 'A01:2021 – Broken Access Control'
            },

            {
                'type': 'error_handling',
                'severity': 'medium',
                'pattern': re.compile(r'(?:ini_set\s*\(\s*[\'"]display_errors[\'"]\s*,\s*[\'"]1[\'"]\s*\)|error_reporting\s*\(\s*E_ALL\s*\))', re.IGNORECASE),
                'message': 'Verbose error display detected',
                'description': 'Showing errors in production may leak internal information.',
                'remediation': 'Disable display_errors in production and log errors centrally.',
                'cwe_id': 'CWE-200',
                'owasp_category': 'A05:2021 – Security Misconfiguration'
            },

            {
                'type': 'error_handling',
                'severity': 'low',
                'pattern': re.compile(r'@\s*[a-zA-Z_]\w*\s*\(', re.IGNORECASE),
                'message': 'Error-suppression operator (@) detected',
                'description': 'The @ operator suppresses errors and can hide problems from logging/monitoring.',
                'remediation': 'Remove @ and handle errors explicitly.',
                'cwe_id': 'CWE-391',
                'owasp_category': 'A09:2021 – Security Logging and Monitoring Failures'
            },

            # --- Unsafe regex usage (preg_replace /e)
            {
                'type': 'code_injection',
                'severity': 'high',
                'pattern': re.compile(r'preg_replace\s*\([^,]+,[^,]+,[^,]+,\s*[\'"]e[\'"]\s*\)', re.IGNORECASE),
                'message': 'preg_replace with /e modifier detected',
                'description': 'The /e modifier can lead to code execution by evaluating replacement as PHP code.',
                'remediation': 'Use preg_replace_callback instead.',
                'cwe_id': 'CWE-94',
                'owasp_category': 'A03:2021 – Injection'
            },

            # --- Header/redirect open redirect detection (simple)
            {
                'type': 'open_redirect',
                'severity': 'medium',
                'pattern': re.compile(r'\bheader\s*\(\s*[\'"]Location:\s*[^\'"]*\$_(?:GET|POST|REQUEST)', re.IGNORECASE),
                'message': 'Possible open redirect (Location header from user input)',
                'description': 'Redirecting to user-controlled URLs may lead to phishing/open redirect.',
                'remediation': 'Validate and whitelist redirect URLs.',
                'cwe_id': 'CWE-601',
                'owasp_category': 'A01:2021 – Broken Access Control'
            },

            # --- SSRF (simple)
            {
                'type': 'ssrf',
                'severity': 'high',
                'pattern': re.compile(r'\b(?:file_get_contents|fopen|curl_exec|curl_multi_exec)\s*\([^)]*\$_(?:GET|POST|REQUEST)', re.IGNORECASE),
                'message': 'Potential SSRF - remote resource requested using user input',
                'description': 'User-controlled URLs used in functions that perform HTTP requests may lead to SSRF.',
                'remediation': 'Validate, whitelist allowed hosts, and avoid direct user-supplied URLs.',
                'cwe_id': 'CWE-918',
                'owasp_category': 'A10:2021 – Server-Side Request Forgery (SSRF)'
            },

            # --- Hardcoded secrets (simple)
            {
                'type': 'hardcoded_secret',
                'severity': 'high',
                'pattern': re.compile(r'(?i)(?:password|passwd|secret|api[_-]?key|token)\s*[:=]\s*[\'"][^\'"]{4,}[\'"]', re.IGNORECASE),
                'message': 'Hardcoded secret detected',
                'description': 'Hardcoded credentials/API keys in source code are a risk.',
                'remediation': 'Store secrets in environment variables or secret managers.',
                'cwe_id': 'CWE-798',
                'owasp_category': 'A06:2021 – Vulnerable and Outdated Components'
            },
        ]

    def get_all_rules(self):
        return self.rules


class JSVulnerabilityRules:
    def __init__(self):
        self.rules = self._initialize_rules()

    def _initialize_rules(self):
        return [
            # --- Code injection / dynamic code
            {
                'type': 'code_injection',
                'severity': 'critical',
                'pattern': re.compile(r'\beval\s*\(', re.IGNORECASE),
                'message': 'Use of eval() detected',
                'description': 'eval() executes arbitrary JavaScript code and is dangerous.',
                'remediation': 'Avoid eval(); use JSON.parse or safer alternatives.',
                'cwe_id': 'CWE-94',
                'owasp_category': 'A03:2021 – Injection'
            },

            {
                'type': 'code_injection',
                'severity': 'high',
                'pattern': re.compile(r'new\s+Function\s*\(', re.IGNORECASE),
                'message': 'Use of Function constructor detected',
                'description': 'new Function(...) constructs dynamic code and can be abused for code injection.',
                'remediation': 'Avoid dynamic function construction; use safer patterns.',
                'cwe_id': 'CWE-94',
                'owasp_category': 'A03:2021 – Injection'
            },

            # --- setTimeout/setInterval with strings
            {
                'type': 'code_injection',
                'severity': 'high',
                'pattern': re.compile(r'(?:setTimeout|setInterval)\s*\(\s*[\'"][^\'"]+[\'"]\s*,', re.IGNORECASE),
                'message': 'setTimeout/setInterval used with string argument',
                'description': 'Passing strings to setTimeout can be evaluated as code.',
                'remediation': 'Use function references instead of string code.',
                'cwe_id': 'CWE-94',
                'owasp_category': 'A03:2021 – Injection'
            },

            # --- DOM-based XSS
            {
                'type': 'dom_xss',
                'severity': 'high',
                'pattern': re.compile(r'\.innerHTML\s*=', re.IGNORECASE),
                'message': 'innerHTML assignment detected',
                'description': 'Assigning to innerHTML with untrusted input can cause XSS.',
                'remediation': 'Use textContent or sanitize with a library like DOMPurify.',
                'cwe_id': 'CWE-79',
                'owasp_category': 'A03:2021 – Injection'
            },

            {
                'type': 'dom_xss',
                'severity': 'high',
                'pattern': re.compile(r'\.outerHTML\s*=', re.IGNORECASE),
                'message': 'outerHTML assignment detected',
                'description': 'Assigning to outerHTML may introduce XSS.',
                'remediation': 'Sanitize user input before inserting into the DOM.',
                'cwe_id': 'CWE-79',
                'owasp_category': 'A03:2021 – Injection'
            },

            {
                'type': 'dom_xss',
                'severity': 'high',
                'pattern': re.compile(r'\bdocument\.write\s*\(', re.IGNORECASE),
                'message': 'document.write() usage detected',
                'description': 'document.write can write untrusted data into the DOM causing XSS.',
                'remediation': 'Avoid document.write(); build DOM nodes safely.',
                'cwe_id': 'CWE-79',
                'owasp_category': 'A03:2021 – Injection'
            },

            # --- Insecure storage / secrets
            {
                'type': 'data_exposure',
                'severity': 'medium',
                'pattern': re.compile(r'(?:localStorage|sessionStorage)\.setItem\s*\([^)]*(?:password|token|key|secret)', re.IGNORECASE),
                'message': 'Sensitive data stored in browser storage',
                'description': 'Storing secrets in browser storage exposes them to XSS/malicious scripts.',
                'remediation': 'Use secure, HttpOnly cookies for sensitive tokens.',
                'cwe_id': 'CWE-922',
                'owasp_category': 'A02:2021 – Cryptographic Failures'
            },

            # --- Insecure network
            {
                'type': 'insecure_transport',
                'severity': 'medium',
                'pattern': re.compile(r'\bfetch\s*\(\s*[\'"]http:', re.IGNORECASE),
                'message': 'Fetch over insecure HTTP detected',
                'description': 'Using HTTP may expose data in transit.',
                'remediation': 'Use HTTPS endpoints and enforce secure transport.',
                'cwe_id': 'CWE-319',
                'owasp_category': 'A02:2021 – Cryptographic Failures'
            },

            {
                'type': 'insecure_transport',
                'severity': 'medium',
                'pattern': re.compile(r'new\s+XMLHttpRequest\s*\(|\bXMLHttpRequest\s*\(', re.IGNORECASE),
                'message': 'XMLHttpRequest usage detected (check transport & CORS)',
                'description': 'Ensure requests are made securely (HTTPS) and CORS is correctly configured.',
                'remediation': 'Use fetch with proper CORS and HTTPS enforcement.',
                'cwe_id': 'CWE-942',
                'owasp_category': 'A05:2021 – Security Misconfiguration'
            },

            # --- Open redirect / location assignment
            {
                'type': 'open_redirect',
                'severity': 'medium',
                'pattern': re.compile(r'window\.location(?:\.href)?\s*=\s*[^;]*location\.search|window\.location', re.IGNORECASE),
                'message': 'Potential open redirect using location/search',
                'description': 'Redirecting to user-controlled URL may lead to phishing/open redirect.',
                'remediation': 'Validate redirect destinations, use whitelists.',
                'cwe_id': 'CWE-601',
                'owasp_category': 'A01:2021 – Broken Access Control'
            },

            # --- postMessage without origin validation
            {
                'type': 'message_handling',
                'severity': 'medium',
                'pattern': re.compile(r'window\.addEventListener\s*\(\s*[\'"]message[\'"]\s*,', re.IGNORECASE),
                'message': 'postMessage listener detected (check origin validation)',
                'description': 'postMessage handlers should validate event.origin before trusting data.',
                'remediation': 'Validate event.origin in message handlers.',
                'cwe_id': 'CWE-346',
                'owasp_category': 'A07:2021 – Identification and Authentication Failures'
            },

            # --- Console logging sensitive info
            {
                'type': 'info_disclosure',
                'severity': 'low',
                'pattern': re.compile(r'console\.(?:log|debug|info|warn|error)\s*\([^)]*(?:password|passwd|secret|token)', re.IGNORECASE),
                'message': 'Potential sensitive data logged to console',
                'description': 'Logging secrets to console can leak them in browser or remote logs.',
                'remediation': 'Avoid logging sensitive data in production.',
                'cwe_id': 'CWE-200',
                'owasp_category': 'A09:2021 – Security Logging and Monitoring Failures'
            },

            # --- Assigning user-controlled data to event handlers or innerHTML via location/hash
            {
                'type': 'dom_xss',
                'severity': 'high',
                'pattern': re.compile(r'(?:location\.hash|location\.search|document\.URL|window\.location)', re.IGNORECASE),
                'message': 'Use of location/document URL fragments detected (validate before use)',
                'description': 'Values from location or URL fragments are user-controlled and may lead to XSS if used directly.',
                'remediation': 'Sanitize any values derived from URL before insertion into DOM.',
                'cwe_id': 'CWE-79',
                'owasp_category': 'A03:2021 – Injection'
            },
        ]

    def get_all_rules(self):
        return self.rules
